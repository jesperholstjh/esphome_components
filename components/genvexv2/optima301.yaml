external_components:
  - source: 
      type: git
      url: https://github.com/jesperholstjh/esphome_components
      ref: main
    refresh: 0s
    components: [genvexv2]

genvexv2:


switch:
  - platform: modbus_controller
    modbus_controller_id: genvex_modbus_controller
    name: "Genvex Cooling"
    address: 2
    register_type: holding
    bitmask: 0x01
    lambda: |-
      if (x) {
        return 1;  // Tænd for kølingen
      } else {
        return 0;  // Sluk for kølingen
      }

  - platform: modbus_controller
    modbus_controller_id: genvex_modbus_controller
    name: "Genvex Preheat"
    id: genvex_preheat
    address: 16
    register_type: holding
    bitmask: 0x01
    lambda: |-
      if (x) {
        return 1;
      } else {
        return 0;
      }

number:

  - platform: modbus_controller
    modbus_controller_id: genvex_modbus_controller
    name: "Genvex Preheat Temperature"
    id: genvex_preheat_temp
    address: 17
    register_type: holding
    min_value: -15.0
    max_value: 0.0
    step: 0.1
    value_type: U_WORD
    lambda: |-
      return (x - 1500) * 0.1;
    write_lambda: |-
      if (x < -15.0 || x > 0.0) {
        return {};
      }
      return static_cast<uint16_t>((x * 10.0) + 1500);
      

  - platform: modbus_controller
    modbus_controller_id: genvex_modbus_controller
    name: "Genvex Cooling Temperature Setpoint"
    id: genvex_cooling_temp
    device_class: temperature
    icon: mdi:thermometer
    unit_of_measurement: °C
    min_value: 3.0  # Minimumsværdi i grader Celsius, ikke i tiendedele grader
    max_value: 10.0  # Maksimumsværdi i grader Celsius, ikke i tiendedele grader
    step: 0.1
    address: 1  # Registeraddressen for køletemperatur
    register_type: holding
    value_type: U_WORD
    lambda: "return (x / 10.0);"  # Opdateret for at dele direkte med 10
    write_lambda: |-
      ESP_LOGD("Genvex Cooling Temp", "Processing new cooling temperature");
      uint16_t new_temp = x * 10;  // Omskriver input grader til Modbus værdi
      ESP_LOGD("Genvex Cooling Temp", "New value %d", new_temp);
      return new_temp;

  - platform: modbus_controller
    modbus_controller_id: genvex_modbus_controller
    name: "Genvex Desired Temperature"
    id: genvex_desired_temp
    device_class: temperature
    icon: mdi:thermometer
    unit_of_measurement: "°C"
    min_value: 10.0  # Minimumsværdi i grader Celsius
    max_value: 30.0  # Maksimumsværdi i grader Celsius
    step: 0.1
    address: 0  # Registeradressen for ønsket temperatur
    register_type: holding
    value_type: U_WORD
    lambda: "return ((x+100)/10);"
    write_lambda: |-
      ESP_LOGD("Genvex Desired Temp", "Processing new desired temperature");
      uint16_t new_temp = x * 10 - 100;
      ESP_LOGD("Genvex Desired Temp", "New value %d", new_temp);
      return new_temp;
      

sensor:

# This template calculates the efficiency of the Genvex ventilation system by comparing 
# the inlet temperature (T1), outdoor temperature (T3), and extract temperature (T7). 
# Efficiency is calculated as a percentage using the formula:
# 100 * (T1 - T3) / (T7 - T3), where T1 is the inlet temperature, T3 is the outdoor temperature,
# and T7 is the extract temperature. This value represents how effectively the system is 
# transferring heat from the extract air to the incoming fresh air.
  - platform: template
    name: "Genvex Efficiency"
    icon: mdi:air-filter
    unit_of_measurement: "%"
    lambda: |-
      float genvex_temp_t1_inlet = (id(genvex_temp_t1).state);
      float genvex_temp_t3_outdoor = (id(genvex_temp_t3).state);
      float genvex_temp_t7_extract = (id(genvex_temp_t7).state);
      float x = (100 * (genvex_temp_t1_inlet - genvex_temp_t3_outdoor) / (genvex_temp_t7_extract - genvex_temp_t3_outdoor));
      return x;
    update_interval: 60s
    state_class: measurement


# This configuration defines a sensor for reading the inlet temperature (T1), which is the air comming from the Genvex into your home.
  - platform: modbus_controller
    modbus_controller_id: genvex_modbus_controller
    name: "Indblæsning (T1)"
    id: genvex_temp_t1
    unit_of_measurement: °C
    accuracy_decimals: 1
    device_class: temperature
    value_type: U_WORD
    register_type: read
    address: 0
    lambda: |-
      ESP_LOGD("T1", "Processing T1 using lambda");
      return ((x - 300) / 10);

  # This setup creates a sensor for measuring the T3 outdoor air temperature, feeding into the Genvex system.
  - platform: modbus_controller
    modbus_controller_id: genvex_modbus_controller
    name: "Friskluft (T3)"
    id: genvex_temp_t3
    unit_of_measurement: °C
    accuracy_decimals: 1
    device_class: temperature
    value_type: U_WORD
    register_type: read
    address: 2
    lambda: |-
      ESP_LOGD("T3", "Processing T3 using lambda");
      return ((x - 300) / 10);

  # This configuration creates a sensor to monitor the T4 exhaust air temperature as it exits the Genvex system.
  - platform: modbus_controller
    modbus_controller_id: genvex_modbus_controller
    name: "Afkast (T4)"
    id: genvex_temp_t4
    unit_of_measurement: °C
    accuracy_decimals: 1
    device_class: temperature
    value_type: U_WORD
    register_type: read
    address: 3
    lambda: |-
      ESP_LOGD("T4", "Processing T4 using lambda");
      return ((x - 300) / 10);

  # This setup defines a sensor for the T7 extracted air temperature, measuring the air being drawn out from your home by the Genvex system.
  - platform: modbus_controller
    modbus_controller_id: genvex_modbus_controller
    name: "Udsugning (T7)"
    id: genvex_temp_t7
    unit_of_measurement: °C
    accuracy_decimals: 1
    device_class: temperature
    value_type: U_WORD
    register_type: read
    address: 6
    lambda: |-
      ESP_LOGD("T7", "Processing T7 using lambda");
      return ((x - 300) / 10);


  - platform: modbus_controller
    modbus_controller_id: genvex_modbus_controller
    name: "Genvex Externt Bypass"
    id: genvex_bypass
    address: 104
    register_type: read
    unit_of_measurement: "%"
    accuracy_decimals: 0
    value_type: U_WORD
    lambda: |-
      ESP_LOGD("Bypass", "Raw Modbus value: %u", x);
      return x;

  - platform: modbus_controller
    modbus_controller_id: genvex_modbus_controller
    name: "Watervalve"
    id: genvex_watervalve
    address: 105
    register_type: read
    unit_of_measurement: "%"
    accuracy_decimals: 0
    value_type: U_WORD

  - platform: modbus_controller
    modbus_controller_id: genvex_modbus_controller
    name: "Inlet fan"
    id: genvex_inlet_fan
    address: 102
    register_type: read
    unit_of_measurement: "%"
    accuracy_decimals: 0
    value_type: U_WORD

  - platform: modbus_controller
    modbus_controller_id: genvex_modbus_controller
    name: "Extract fan"
    id: genvex_extract_fan
    address: 103
    register_type: read
    unit_of_measurement: "%"
    accuracy_decimals: 0
    value_type: U_WORD

  - platform: modbus_controller
    modbus_controller_id: genvex_modbus_controller
    name: "Genvex Programme Version Controller"
    id: genvex_prog_ver_ctrl
    address: 200
    accuracy_decimals: 1
    value_type: U_WORD
    register_type: read
    lambda: |-
      ESP_LOGD("Programme Version Controller", "Raw Modbus value: %u", x);
      return x * 0.1;

  - platform: modbus_controller
    modbus_controller_id: genvex_modbus_controller
    name: "Genvex Programme Version Display"
    id: genvex_prog_ver_display
    address: 201
    accuracy_decimals: 1
    value_type: U_WORD
    register_type: read
    lambda: |-
      ESP_LOGD("Programme Version Display", "Raw Modbus value: %u", x);
      return x * 0.1;


  - platform: modbus_controller
    modbus_controller_id: genvex_modbus_controller
    name: "Modbus Version"
    id: modbus_version
    address: 204
    accuracy_decimals: 1
    value_type: U_WORD
    register_type: read
    lambda: |-
      return x * 0.1;

